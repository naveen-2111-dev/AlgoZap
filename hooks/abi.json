{
    "name": "Trigger",
    "structs": {},
    "methods": [
        {
            "name": "hello",
            "args": [
                {
                    "type": "string",
                    "name": "name"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deposit",
            "args": [
                {
                    "type": "pay",
                    "name": "payment"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "trigger_payment",
            "args": [
                {
                    "type": "address",
                    "name": "recipient"
                },
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw_all",
            "args": [],
            "returns": {
                "type": "string"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_balance",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_creator",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_contract_address",
            "args": [],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_instance_info",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Returns just the application ID for simplicity",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 1,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "creator": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Y3JlYXRvcg=="
                },
                "balance": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YmFsYW5jZQ=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        416,
                        499
                    ],
                    "errorMessage": "Amount must be greater than zero"
                },
                {
                    "pc": [
                        413,
                        496
                    ],
                    "errorMessage": "Insufficient contract balance"
                },
                {
                    "pc": [
                        561
                    ],
                    "errorMessage": "No balance to withdraw"
                },
                {
                    "pc": [
                        120,
                        136,
                        152,
                        168,
                        184,
                        208,
                        235,
                        265,
                        299
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        484,
                        555
                    ],
                    "errorMessage": "Only creator can withdraw"
                },
                {
                    "pc": [
                        334
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        123,
                        139,
                        155,
                        171,
                        187,
                        211,
                        238,
                        268,
                        302
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        373,
                        408,
                        491,
                        559,
                        602
                    ],
                    "errorMessage": "check self.balance exists"
                },
                {
                    "pc": [
                        479,
                        550,
                        608
                    ],
                    "errorMessage": "check self.creator exists"
                },
                {
                    "pc": [
                        278
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmAwdiYWxhbmNlBBUffHUHY3JlYXRvcjEYQAAHKjEAZygjZzEbQQEZggkEAr7OEQSvcgQIBEBB87kEbdc4iASnLQTjBLkQx3sEICoOGQQ4T2IsBPQMU5o2GgCOCQC1AJMAdQBaAEIAMgAiABIAAiNDMRkURDEYRIgB5ilMULAiQzEZFEQxGESIAdMpTFCwIkMxGRREMRhEiAG+KUxQsCJDMRkURDEYRIgBqClMULAiQzEZFEQxGESIAWJJFRZXBgJMUClMULAiQzEZFEQxGEQ2GgGIAP1JFRZXBgJMUClMULAiQzEZFEQxGEQ2GgE2GgKIAJdJFRZXBgJMUClMULAiQzEZFEQxGEQxFiIJSTgQIhJEiABHSRUWVwYCTFApTFCwIkMxGRREMRhENhoBVwIAiAAZSRUWVwYCTFApTFCwIkMxGUD/KDEYFEQiQ4oBAYAHSGVsbG8sIIv/UImKAQGL/zgHMgoSRIv/OAhJRCMoZUQIKExngBJEZXBvc2l0IHN1Y2Nlc3NmdWyJigIBi/8XIyhlRElLAg9ESwFEsUsBsgiL/rIHIrIQI7IBs0wJKExngB5QYXltZW50IHRyaWdnZXJlZCBzdWNjZXNzZnVsbHmJigEBMQAjKmVETEsBEkSL/xcjKGVESUsCD0RLAUSxSwGyCE8CsgcishAjsgGzTAkoTGeAFVdpdGhkcmF3YWwgc3VjY2Vzc2Z1bIkxACMqZURMSwESRCMoZURJRLGyCLIHIrIQI7IBsygjZ4ATQWxsIGZ1bmRzIHdpdGhkcmF3bokjKGVEFokjKmVEiTIKiTIIFok=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 9,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}